@page "/login"

@using eStore.Components.Models.Auth
@using eStore.Components.Services
@using BLL.DTOs

@code {
    [Inject] private MemberService MemberService { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;
    [Inject] private IConfiguration Configuration { get; set; } = null!;
    [Inject] private SessionService SessionService { get; set; } = null!;

    [SupplyParameterFromForm]
    private LoginModel loginModel { get; set; } = new();

    private string? errorMessage;
    private bool isLoading;

    protected override async Task OnInitializedAsync() {
        var session = SessionService.GetUserSession();
        if (session != null) {
            NavigationManager.NavigateTo("/");
        }
        await Task.CompletedTask;
    }

    private async Task HandleLogin() {
        isLoading = true;
        errorMessage = null;

        try {
            string? adminEmail = Configuration["AdminAccount:email"];
            string? adminPassword = Configuration["AdminAccount:password"];

            if (loginModel.Email.Trim() == adminEmail && loginModel.Password == adminPassword) {
                MemberDTO adminDto = new() {
                    MemberId = 0,
                    Email = adminEmail,
                    Password = string.Empty,
                    CompanyName = "Admin",
                    Country = "System",
                    City = "System"
                };

                SessionService.SetUserSession(adminDto);
                return;
            }

            MemberDTO memberDto = new() {
                Email = loginModel.Email.Trim(),
                Password = loginModel.Password
            };

            var result = await MemberService.Login(memberDto);

            if (result != null) {
                SessionService.SetUserSession(result);
                NavigationManager.NavigateTo("/");
            } else {
                errorMessage = "Invalid email or password";
            }
        } catch (Exception ex) {
            errorMessage = ex.Message;
        }

        isLoading = false;
        NavigationManager.NavigateTo("/");

    }
}

<div class="login-page m-0 p-0">
    <div class="login-card">
        <h3 class="login-title text-center">Đăng nhập</h3>

        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="login_form">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage)) {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            <div class="mb-3">
                <label for="email" class="form-label">Email</label>
                <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger small mt-1" />
            </div>

            <div class="mb-4">
                <label for="password" class="form-label">Mật khẩu</label>
                <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small mt-1" />
            </div>

            <button type="submit" class="btn btn-success w-100 mb-3" disabled="@isLoading">
                @if (isLoading) {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span class="ms-2">Đang xử lý...</span>
                } else {
                    <span>Đăng nhập</span>
                }
            </button>

            <div class="text-center">
                <p class="mb-0">
                    Chưa có tài khoản?
                    <a href="/register" class="text-success text-decoration-none">Đăng ký ngay!</a>
                </p>
            </div>
        </EditForm>
    </div>
</div>

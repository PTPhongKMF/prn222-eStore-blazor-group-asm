@page "/cart"
@inject CartService CartService
@inject NavigationManager NavigationManager
@inject SessionService SessionService
@inject IVnPayService VnPayService
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@using BLL.Interface
@using BLL.DTOs
@using BLL.Services
@using Microsoft.Extensions.Primitives
@using eStore.Components.Layout
@using Microsoft.AspNetCore.WebUtilities
<PageTitle>Giỏ Hàng Của Tôi</PageTitle>
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success text-center my-4">
        <i class="bi bi-check-circle me-2"></i>@successMessage
        <div class="mt-2"><em>Đang chuyển về trang chủ...</em></div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger text-center my-4">
        <i class="bi bi-x-circle me-2"></i>@errorMessage
    </div>
}

@code {
    private MemberDTO? UserSession { get; set; }
    private List<CartDTO> cartItems = new();
    private string? errorMessage;
    private bool isLoading = true;
    private bool isUpdating;

    // protected override async Task OnInitializedAsync()
    // {
    //     Get user session directly from SessionService
    //     UserSession = SessionService.GetUserSession();
        
    //     Check if user is logged in before loading cart
    //     if (UserSession == null)
    //     {
    //         NavigationManager.NavigateTo("/login", true);
    //         return;
    //     }

    //     await LoadCartItems();
    // }

    private async Task LoadCartItems()
    {
        try
        {
            // Double-check user session before making API call
            if (UserSession == null)
            {
                NavigationManager.NavigateTo("/login", true);
                return;
            }

            cartItems = await CartService.GetCartByMemberIdAsync(UserSession.MemberId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải giỏ hàng: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task UpdateQuantity(int productId, int newQuantity)
    {
        if (newQuantity < 1 || UserSession == null) return;

        isUpdating = true;
        try
        {
            await CartService.UpdateCartItemQuantityAsync(UserSession.MemberId, productId, newQuantity);
            await LoadCartItems();
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi cập nhật số lượng: {ex.Message}";
        }
        finally
        {
            isUpdating = false;
        }
    }

    private async Task RemoveItem(int productId)
    {
        if (UserSession == null) return;

        isUpdating = true;
        try
        {
            await CartService.RemoveFromCartAsync(UserSession.MemberId, productId);
            await LoadCartItems();
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi xóa sản phẩm: {ex.Message}";
        }
        finally
        {
            isUpdating = false;
        }
    }

    private decimal GetItemTotal(CartDTO item)
    {
        return (item.Product?.UnitPrice ?? 0) * item.Quantity;
    }

    private decimal GetCartTotal()
    {
        return cartItems.Sum(item => GetItemTotal(item));
    }
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.ContainsKey("vnp_ResponseCode"))
        {
            var queryDict = new QueryCollection(
                queryParams.ToDictionary(
                    pair => pair.Key,
                    pair => new StringValues(pair.Value.ToArray())
                )
            );

            var result = VnPayService.PaymentExecute(queryDict);

            if (result.Success)
            {
                successMessage = $"✅ Thanh toán thành công! Mã GD: {result.TransactionId}, Mô tả: {result.OrderDescription}";

                // Delay 3s rồi chuyển hướng về trang chủ
                NavigationManager.NavigateTo($"/payment-success?TransactionId={result.TransactionId}&OrderDescription={result.OrderDescription}");
                return;
            }
            else
            {
                errorMessage = $"❌ Thanh toán thất bại! Mã lỗi: {result.VnPayResponseCode}";
            }
        }

        UserSession = SessionService.GetUserSession();
        if (UserSession == null)
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        await LoadCartItems();
    }

    private async Task HandleCheckout()
    {
        if (UserSession == null || !cartItems.Any()) return;

        var model = new DAL.Entities.PaymentInformationModel
            {
                Amount = GetCartTotal(),
                OrderDescription = "a",
                OrderType = "billpayment",
                Name = ""
            };

        var context = HttpContextAccessor.HttpContext;
        var paymentUrl = VnPayService.CreatePaymentUrl(model, context);

        // Redirect trang đến VNPay
        NavigationManager.NavigateTo(paymentUrl, forceLoad: true);
    }


}

@if (UserSession == null)
{
    <div class="alert alert-warning text-center my-5">
        <i class="bi bi-exclamation-triangle me-2"></i>
        Vui lòng đăng nhập để xem giỏ hàng.
    </div>
}
else
{
    <div class="container py-4">
        <div class="card shadow-sm">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h4 class="mb-0">
                    <i class="bi bi-cart3 me-2"></i>Giỏ Hàng Của Tôi
                </h4>
                <div>
                    <a href="/" class="btn btn-light btn-sm">
                        <i class="bi bi-house me-1"></i>Tiếp Tục Mua Sắm
                    </a>
                </div>
            </div>
            <div class="card-body">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        @errorMessage
                    </div>
                }

                @if (isLoading)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Đang tải...</span>
                        </div>
                        <p class="mt-2">Đang tải giỏ hàng...</p>
                    </div>
                }
                else if (!cartItems.Any())
                {
                    <div class="text-center py-5">
                        <i class="bi bi-cart-x display-1 text-muted"></i>
                        <h5 class="mt-3">Giỏ hàng của bạn đang trống</h5>
                        <p class="text-muted">Hãy thêm một số sản phẩm vào giỏ hàng để tiếp tục</p>
                        <a href="/" class="btn btn-primary">
                            <i class="bi bi-plus-circle me-1"></i>Bắt Đầu Mua Sắm
                        </a>
                    </div>
                }
                else
                {
                    <div class="row">
                        <div class="col-lg-8">
                            @foreach (var item in cartItems)
                            {
                                <div class="card mb-3">
                                    <div class="card-body">
                                        <div class="row align-items-center">
                                            <div class="col-md-2">
                                                @if (!string.IsNullOrEmpty(item.Product?.ImageUrl))
                                                {
                                                    <img src="@item.Product.ImageUrl" alt="@item.Product.ProductName" class="img-fluid rounded" style="max-height: 80px;">
                                                }
                                                else
                                                {
                                                    <div class="bg-light rounded d-flex align-items-center justify-content-center" style="height: 80px;">
                                                        <i class="bi bi-image text-muted"></i>
                                                    </div>
                                                }
                                            </div>
                                            <div class="col-md-4">
                                                <h6 class="mb-1">@item.Product?.ProductName</h6>
                                                <small class="text-muted">Mã SP: @item.ProductId</small>
                                            </div>
                                            <div class="col-md-2">
                                                <strong class="text-success">@((item.Product?.UnitPrice ?? 0).ToString("C0", new System.Globalization.CultureInfo("vi-VN")))</strong>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="input-group input-group-sm">
                                                    <button class="btn btn-outline-secondary" type="button"
                                                            @onclick="() => UpdateQuantity(item.ProductId, item.Quantity - 1)"
                                                            disabled="@(isUpdating || item.Quantity <= 1)">
                                                        <i class="bi bi-dash"></i>
                                                    </button>
                                                    <input type="number" class="form-control text-center"
                                                           value="@item.Quantity" min="1"
                                                           @onchange="@(async (e) => await UpdateQuantity(item.ProductId, int.Parse(e.Value?.ToString() ?? "1")))"
                                                           disabled="@isUpdating">
                                                    <button class="btn btn-outline-secondary" type="button"
                                                            @onclick="() => UpdateQuantity(item.ProductId, item.Quantity + 1)"
                                                            disabled="@isUpdating">
                                                        <i class="bi bi-plus"></i>
                                                    </button>
                                                </div>
                                            </div>
                                            <div class="col-md-2">
                                                <div class="d-flex justify-content-between align-items-center">
                                                    <strong>@GetItemTotal(item).ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</strong>
                                                    <button class="btn btn-outline-danger btn-sm ms-2"
                                                            @onclick="() => RemoveItem(item.ProductId)"
                                                            disabled="@isUpdating">
                                                        <i class="bi bi-trash"></i>
                                                    </button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                        <div class="col-lg-4">
                            <div class="card">
                                <div class="card-header">
                                    <h5 class="mb-0">Tóm Tắt Đơn Hàng</h5>
                                </div>
                                <div class="card-body">
                                    <div class="d-flex justify-content-between mb-2">
                                        <span>Số lượng sản phẩm:</span>
                                        <span>@cartItems.Sum(x => x.Quantity)</span>
                                    </div>
                                    <div class="d-flex justify-content-between mb-3">
                                        <span>Tạm tính:</span>
                                        <span>@GetCartTotal().ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</span>
                                    </div>
                                    <hr>
                                    <div class="d-flex justify-content-between mb-3">
                                        <strong>Tổng cộng:</strong>
                                        <strong class="text-success">@GetCartTotal().ToString("C0", new System.Globalization.CultureInfo("vi-VN"))</strong>
                                    </div>
                                    <button class="btn btn-success w-100" @onclick="HandleCheckout" disabled="@isUpdating">
                                        <i class="bi bi-credit-card me-1"></i>Thanh Toán
                                    </button>

                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
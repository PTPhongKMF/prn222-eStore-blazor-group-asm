@page "/products"
@page "/products/{CategoryId:int?}"
@inject ProductService ProductService
@inject CategoryService CategoryService
@inject CartService CartService
@inject SessionService SessionService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@using BLL.DTOs
@using BLL.Services
@using eStore.Components.Shared

<PageTitle>Sản phẩm - eStore</PageTitle>

<div class="hero-section position-relative mb-4">
    <div class="position-absolute top-50 start-50 translate-middle text-center text-white">
        <h1 class="display-4 fw-bold title-bg px-4 py-2">Sản Phẩm của Chúng Tôi</h1>
    </div>
</div>

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-search"></i>
                </span>
                <input @bind="searchTerm" type="text" class="form-control" placeholder="Tìm kiếm theo tên sản phẩm, khối lượng hoặc danh mục...">
                <button class="btn btn-primary" @onclick="HandleSearch">
                    Tìm kiếm
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Filter Section -->
        <div class="col-lg-3">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h5 class="card-title mb-0">Bộ Lọc</h5>
                        <button class="btn btn-primary" @onclick="ApplyFilters">
                            Áp Dụng
                        </button>
                    </div>

                    <!-- Sort Options -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="mb-0">Sắp Xếp Theo</h6>
                        </div>
                        <select class="form-select" @bind="currentSortOption">
                            <option value="@ProductSortBy.None">Mặc định</option>
                            <option value="@ProductSortBy.PriceAscending">Giá tăng dần</option>
                            <option value="@ProductSortBy.PriceDescending">Giá giảm dần</option>
                            <option value="@ProductSortBy.IdAscending">Cũ nhất</option>
                            <option value="@ProductSortBy.IdDescending">Mới nhất</option>
                        </select>
                    </div>

                    <!-- Categories Filter -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="mb-0">Danh Mục</h6>
                            <button class="btn btn-link p-0" @onclick="ClearCategories">Xóa</button>
                        </div>
                        @foreach (var category in categories)
                        {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                       @bind="category.IsSelected" id="@($"cat_{category.CategoryId}")">
                                <label class="form-check-label" for="@($"cat_{category.CategoryId}")">
                                    @category.CategoryName
                                </label>
                            </div>
                        }
                    </div>

                    <!-- Price Range Filter -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="mb-0">Khoảng Giá</h6>
                            <button class="btn btn-link p-0" @onclick="ClearPriceRange">Xóa</button>
                        </div>
                        <div class="mb-3">
                            <label class="form-label small">Từ:</label>
                            <input type="number" class="form-control" @bind="minPrice">
                        </div>
                        <div class="mb-3">
                            <label class="form-label small">Đến:</label>
                            <input type="number" class="form-control" @bind="maxPrice">
                        </div>
                    </div>

                    <button class="btn btn-primary w-100" @onclick="ApplyFilters">
                        Áp Dụng Bộ Lọc
                    </button>
                </div>
            </div>
        </div>

        <!-- Product List -->
        <div class="col-lg-9">
            @if (isLoading)
            {
                <div class="row">
                    @for (int i = 0; i < 12; i++)
                    {
                        <div class="col-lg-4 col-md-6 mb-4">
                            <div class="card h-100 shadow-sm">
                                <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                                    <div class="spinner-border text-primary" role="status">
                                        <span class="visually-hidden">Đang tải...</span>
                                    </div>
                                </div>
                                <div class="card-body">
                                    <div class="placeholder-glow">
                                        <span class="placeholder col-8"></span>
                                        <span class="placeholder col-6"></span>
                                        <span class="placeholder col-4"></span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle me-2"></i>
                    <strong>Lỗi:</strong> @errorMessage
                </div>
            }
            else if (currentPageProducts.Any())
            {
                <div class="row">
                    @foreach (var product in currentPageProducts)
                    {
                        <div class="col-lg-4 col-md-6 mb-4">
                            <div class="card h-100 shadow-sm border-0 product-card" style="transition: all 0.3s ease;">
                                <div class="position-relative overflow-hidden">
                                    @if (!string.IsNullOrEmpty(product.ImageUrl))
                                    {
                                        <img src="@product.ImageUrl" 
                                             alt="@product.ProductName" 
                                             class="card-img-top" 
                                             style="height: 200px; object-fit: cover; transition: transform 0.3s ease;" />
                                    }
                                    else
                                    {
                                        <div class="card-img-top bg-light d-flex align-items-center justify-content-center text-muted" style="height: 200px;">
                                            <i class="bi bi-image" style="font-size: 3rem;"></i>
                                        </div>
                                    }
                                    
                                    <!-- Status Badge -->
                                    @if (!product.ActiveStatus)
                                    {
                                        <span class="position-absolute top-0 start-0 badge bg-secondary m-2">Ngừng bán</span>
                                    }
                                    
                                    <!-- Stock Badge -->
                                    @if (product.UnitsInStock <= 10 && product.UnitsInStock > 0)
                                    {
                                        <span class="position-absolute top-0 end-0 badge bg-warning text-dark m-2">Sắp hết</span>
                                    }
                                    else if (product.UnitsInStock == 0)
                                    {
                                        <span class="position-absolute top-0 end-0 badge bg-danger m-2">Hết hàng</span>
                                    }
                                </div>
                                
                                <div class="card-body d-flex flex-column">
                                    <div class="mb-2">
                                        <span class="badge bg-primary bg-opacity-10 text-primary mb-2">@product.Category.CategoryName</span>
                                    </div>
                                    
                                    <h5 class="card-title mb-2" style="font-size: 1rem; line-height: 1.3;">
                                        @product.ProductName
                                    </h5>
                                    
                                    <p class="card-text text-muted small mb-2">
                                        <i class="bi bi-weight me-1"></i>@product.Weight
                                    </p>
                                    
                                    <div class="mt-auto">
                                        <div class="d-flex justify-content-between align-items-center mb-3">
                                            <h6 class="text-primary fw-bold mb-0">
                                                @product.UnitPrice.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))
                                            </h6>
                                            <small class="text-muted">
                                                <i class="bi bi-box me-1"></i>@product.UnitsInStock
                                            </small>
                                        </div>
                                        
                                        <div class="d-grid gap-2">
                                            @if (product.ActiveStatus && product.UnitsInStock > 0)
                                            {
                                                <button class="btn btn-primary btn-sm" @onclick="() => AddToCart(product)">
                                                    <i class="bi bi-cart-plus me-1"></i>Thêm vào giỏ
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-secondary btn-sm" disabled>
                                                    <i class="bi bi-cart-x me-1"></i>Không thể mua
                                                </button>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination -->
                <Pagination 
                    CurrentPage="@currentPage"
                    TotalPages="@totalPages"
                    OnPageChange="@GoToPage" />
            }
            else
            {
                <div class="text-center py-5">
                    <i class="bi bi-search display-1 text-muted mb-3"></i>
                    <h4 class="text-muted">Không tìm thấy sản phẩm nào</h4>
                    <p class="text-muted">Hãy thử tìm kiếm với từ khóa khác hoặc chọn danh mục khác.</p>
                    <button class="btn btn-primary" @onclick="ClearFilters">
                        <i class="bi bi-arrow-clockwise me-2"></i>Xóa bộ lọc
                    </button>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .hero-section {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        height: 300px;
        background-size: cover;
        background-position: center;
    }
    
    .title-bg {
        background: rgba(0, 0, 0, 0.5);
        border-radius: 10px;
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important;
    }
    
    .product-card:hover .card-img-top {
        transform: scale(1.05);
    }
</style>

@code {
    [Parameter] public int? CategoryId { get; set; }
    
    private string searchTerm = string.Empty;
    private decimal? minPrice;
    private decimal? maxPrice;
    private List<ProductDTO> currentPageProducts = new();
    private List<CategoryWithSelection> categories = new();
    private ProductSortBy currentSortOption = ProductSortBy.None;
    private int currentPage = 1;
    private int totalPages = 1;
    private int itemsPerPage = 12;
    private bool isLoading = true;
    private string? errorMessage;

    private class CategoryWithSelection : CategoryDTO
    {
        public bool IsSelected { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadData(CategoryId);
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadData(int? initialCategoryId = null)
    {
        var categoryDtos = await CategoryService.GetAllCategories();
        categories = categoryDtos.Select(c => new CategoryWithSelection
        {
            CategoryId = c.CategoryId,
            CategoryName = c.CategoryName,
            Description = c.Description,
            ImageUrl = c.ImageUrl,
            IsSelected = initialCategoryId.HasValue && c.CategoryId == initialCategoryId.Value
        }).ToList();

        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        // Get selected category IDs
        var selectedCategoryIds = categories
            .Where(c => c.IsSelected)
            .Select(c => c.CategoryId)
            .ToList();

        // Add CategoryId parameter if present
        if (CategoryId.HasValue && !selectedCategoryIds.Contains(CategoryId.Value))
        {
            selectedCategoryIds.Add(CategoryId.Value);
        }

        var result = await ProductService.GetActiveProducts(
            currentPage,
            itemsPerPage,
            currentSortOption,
            searchTerm,
            minPrice,
            maxPrice,
            selectedCategoryIds);
            
        currentPageProducts = result.Items;
        totalPages = result.TotalPages;
        currentPage = result.CurrentPage;
        
        StateHasChanged();
    }

    private async Task HandleSearch()
    {
        currentPage = 1;
        await LoadProducts();
    }

    private async Task ApplyFilters()
    {
        currentPage = 1;
        await LoadProducts();
    }

    private void ClearCategories()
    {
        foreach (var category in categories)
        {
            category.IsSelected = false;
        }
        if (CategoryId.HasValue)
        {
            NavigationManager.NavigateTo("/products");
            return;
        }
        ApplyFilters();
    }

    private async Task ClearPriceRange()
    {
        minPrice = null;
        maxPrice = null;
        await ApplyFilters();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        minPrice = null;
        maxPrice = null;
        foreach (var category in categories)
        {
            category.IsSelected = false;
        }
        ApplyFilters();
    }

    private async Task GoToPage(int page)
    {
        if (page < 1 || page > totalPages || page == currentPage)
            return;

        currentPage = page;
        await LoadProducts();
    }

    private async Task AddToCart(ProductDTO product)
    {
        var userSession = SessionService.GetUserSession();
        if (userSession == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        
        try
        {
            await CartService.AddToCartAsync(userSession.MemberId, product.ProductId, 1);
            // Could add a success message here
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi thêm vào giỏ hàng: {ex.Message}";
        }
    }
}






@page "/products"
@page "/products/{CategoryId:int?}"
@rendermode InteractiveServer
@using BLL.Services
@using Microsoft.AspNetCore.WebUtilities

@code {
    [Parameter]
    public int? CategoryId { get; set; }

    [Inject] private ProductService ProductService { get; set; } = null!;
    [Inject] private CategoryService CategoryService { get; set; } = null!;
    [Inject] private NavigationManager NavigationManager { get; set; } = null!;

    [Parameter]
    public int ItemsPerPage { get; set; } = 12;

    private string searchTerm = string.Empty;
    private decimal? minPrice;
    private decimal? maxPrice;
    private List<ProductDTO> allProducts = new();
    private List<ProductDTO> currentPageProducts = new();
    private List<CategoryWithSelection> categories = new();
    private ProductSortBy currentSortOption = ProductSortBy.None;
    private int currentPage = 1;
    private int totalPages = 1;

    private class CategoryWithSelection : CategoryDTO {
        public bool IsSelected { get; set; }
    }

    protected override async Task OnInitializedAsync() {
        // Check for categoryId in query string only on first load
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("categoryId", out var categoryIdStr) 
            && int.TryParse(categoryIdStr, out var categoryId))
        {
            await LoadData(categoryId);
        }
        else
        {
            await LoadData(null);
        }
    }

    private async Task LoadData(int? initialCategoryId = null) {
        var categoryDtos = await CategoryService.GetAllCategories();
        categories = categoryDtos.Select(c => new CategoryWithSelection {
            CategoryId = c.CategoryId,
            CategoryName = c.CategoryName,
            Description = c.Description,
            ImageUrl = c.ImageUrl,
            IsSelected = initialCategoryId.HasValue && c.CategoryId == initialCategoryId.Value
        }).ToList();

        await LoadProducts();
    }

    private async Task LoadProducts() {
        // Get selected category IDs (only from checkboxes if no CategoryId parameter)
        var selectedCategoryIds = categories
            .Where(c => c.IsSelected)
            .Select(c => c.CategoryId)
            .ToList();

        // Add CategoryId parameter if present
        if (CategoryId.HasValue && !selectedCategoryIds.Contains(CategoryId.Value)) {
            selectedCategoryIds.Add(CategoryId.Value);
        }

        var result = await ProductService.GetActiveProducts(
            currentPage, 
            ItemsPerPage, 
            currentSortOption,
            searchTerm,
            minPrice,
            maxPrice,
            selectedCategoryIds);
        currentPageProducts = result.Items;
        totalPages = result.TotalPages;
        currentPage = result.CurrentPage;
    }

    private async Task HandleSearch() {
        Console.WriteLine($"Search triggered with term: {searchTerm}");
        currentPage = 1;
        await LoadProducts();
        StateHasChanged();
    }

    private async Task ApplyFilters() {
        Console.WriteLine($"Applying filters - Price range: {minPrice} to {maxPrice}");
        currentPage = 1;
        await LoadProducts();
    }

    private void ClearCategories() {
        foreach (var category in categories) {
            category.IsSelected = false;
        }
        if (CategoryId.HasValue) {
            // Reset URL to remove CategoryId parameter
            NavigationManager.NavigateTo("/products");
            return; // Navigation will trigger a new page load
        }
        ApplyFilters();
    }

    private async Task ClearPriceRange() {
        minPrice = null;
        maxPrice = null;
        await ApplyFilters();
    }

    private async Task GoToPage(int page) {
        if (page < 1 || page > totalPages || page == currentPage)
            return;

        currentPage = page;
        await LoadProducts();
    }
}


<div class="hero-section position-relative mb-4">
    <div class="position-absolute top-50 start-50 translate-middle text-center text-white">
        <h1 class="display-4 fw-bold title-bg px-4 py-2">Sản Phẩm của Chúng Tôi</h1>
    </div>
</div>

<div class="container">
    <div class="row mb-4">
        <div class="col">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-search"></i>
                </span>
                <input @bind="searchTerm" type="text" class="form-control" placeholder="Tìm kiếm theo tên sản phẩm, khối lượng hoặc danh mục...">
                <button class="btn btn-primary" @onclick="HandleSearch">
                    Tìm kiếm
                </button>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Filter Section -->
        <div class="col-lg-3">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h5 class="card-title mb-0">Bộ Lọc</h5>
                        <button class="btn btn-primary" @onclick="ApplyFilters">
                            Áp Dụng
                        </button>
                    </div>

                    <!-- Sort Options -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="mb-0">Sắp Xếp Theo</h6>
                        </div>
                        <select class="form-select" @bind="currentSortOption">
                            <option value="@ProductSortBy.None">Mặc định</option>
                            <option value="@ProductSortBy.PriceAscending">Giá tăng dần</option>
                            <option value="@ProductSortBy.PriceDescending">Giá giảm dần</option>
                            <option value="@ProductSortBy.IdAscending">Cũ nhất</option>
                            <option value="@ProductSortBy.IdDescending">Mới nhất</option>
                        </select>
                    </div>

                    <!-- Categories Filter -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="mb-0">Danh Mục</h6>
                            <button class="btn btn-link p-0" @onclick="ClearCategories">Xóa</button>
                        </div>
                        @foreach (var category in categories) {
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox"
                                       @bind="category.IsSelected" id="@($"cat_{category.CategoryId}")">
                                <label class="form-check-label" for="@($"cat_{category.CategoryId}")">
                                    @category.CategoryName
                                </label>
                            </div>
                        }
                    </div>

                    <!-- Price Range Filter -->
                    <div class="mb-4">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h6 class="mb-0">Khoảng Giá</h6>
                            <button class="btn btn-link p-0" @onclick="ClearPriceRange">Xóa</button>
                        </div>
                        <div class="mb-3">
                            <label class="form-label small">Từ:</label>
                            <input type="number" class="form-control" @bind="minPrice">
                        </div>
                        <div class="mb-3">
                            <label class="form-label small">Đến:</label>
                            <input type="number" class="form-control" @bind="maxPrice">
                        </div>
                    </div>

                    <button class="btn btn-primary w-100" @onclick="ApplyFilters">
                        Áp Dụng Bộ Lọc
                    </button>
                </div>
            </div>
        </div>

        <!-- Product List -->
        <div class="col-lg-9">
            <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3 g-4">
                @foreach (var product in currentPageProducts)
                {
                    <div class="col">
                        <ProductCard Product="product" />
                    </div>
                }
            </div>

            <Pagination 
                CurrentPage="@currentPage"
                TotalPages="@totalPages"
                OnPageChange="@GoToPage" />
        </div>
    </div>
</div>






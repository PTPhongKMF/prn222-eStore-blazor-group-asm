@page "/"
@inject IProductService ProductService
@inject ICategoryService CategoryService
@inject IFileStorageService FileStorageService
@inject CartService CartService
@inject SessionService SessionService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@using BLL.DTOs
@using BLL.Interface
@using BLL.Services
@using eStore.Components.Services

<PageTitle>eStore - Trang chủ</PageTitle>


<!-- Hero Section -->
<section class="hero-section bg-primary text-white py-5 mb-5">
    <div class="container">
        <div class="row align-items-center">
            <div class="col-lg-6">
                <h1 class="display-4 fw-bold mb-3">Chào mừng đến với eStore</h1>
                <p class="lead mb-4">Khám phá hàng ngàn sản phẩm chất lượng cao với giá cả hợp lý. Mua sắm dễ dàng, giao hàng nhanh chóng!</p>
            </div>
            <div class="col-lg-6 text-center">
                <i class="bi bi-shop display-1"></i>
            </div>
        </div>
    </div>
</section>

<!-- Category Filter -->
<div class="container mb-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h2 class="fw-bold">Sản phẩm nổi bật</h2>
                <div class="d-flex gap-2">
                    <select class="form-select" style="width: auto;" @bind="selectedCategoryId" @bind:event="onchange">
                        <option value="0">Tất cả danh mục</option>
                        @foreach (var category in categories)
                        {
                            <option value="@category.CategoryId">@category.CategoryName</option>
                        }
                    </select>
                    <div class="input-group" style="width: 300px;">
                        <span class="input-group-text bg-transparent border-end-0">
                            <i class="bi bi-search"></i>
                        </span>
                        <input type="text" class="form-control border-start-0" 
                               placeholder="Tìm kiếm sản phẩm..." 
                               @bind="searchTerm" 
                               @bind:event="oninput" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Error Message -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="container mb-4">
        <div class="alert alert-danger">
            <i class="bi bi-exclamation-triangle me-2"></i>
            <strong>Lỗi:</strong> @errorMessage
        </div>
    </div>
}

<!-- Products Section -->
<section id="products" class="container mb-5">
    @if (isLoading)
    {
        <div class="row">
            @for (int i = 0; i < 8; i++)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                    <div class="card h-100 shadow-sm">
                        <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Đang tải...</span>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="placeholder-glow">
                                <span class="placeholder col-8"></span>
                                <span class="placeholder col-6"></span>
                                <span class="placeholder col-4"></span>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else if (filteredProducts.Any())
    {
        <div class="row">
            @foreach (var product in filteredProducts.Take(displayCount))
            {
                <div class="col-lg-3 col-md-4 col-sm-6 mb-4">
                    <div class="card h-100 shadow-sm border-0 product-card" style="transition: all 0.3s ease;">
                        <div class="position-relative overflow-hidden">
                            @if (!string.IsNullOrEmpty(product.ImageUrl))
                            {
                                <img src="@FileStorageService.GetImageUrl(product.ImageUrl)" 
                                     alt="@product.ProductName" 
                                     class="card-img-top" 
                                     style="height: 200px; object-fit: cover; transition: transform 0.3s ease;" />
                            }
                            else
                            {
                                <div class="card-img-top bg-light d-flex align-items-center justify-content-center text-muted" style="height: 200px;">
                                    <i class="bi bi-image" style="font-size: 3rem;"></i>
                                </div>
                            }
                            
                            <!-- Status Badge -->
                            @if (!product.ActiveStatus)
                            {
                                <span class="position-absolute top-0 start-0 badge bg-secondary m-2">Ngừng bán</span>
                            }
                            
                            <!-- Stock Badge -->
                            @if (product.UnitsInStock <= 10 && product.UnitsInStock > 0)
                            {
                                <span class="position-absolute top-0 end-0 badge bg-warning text-dark m-2">Sắp hết</span>
                            }
                            else if (product.UnitsInStock == 0)
                            {
                                <span class="position-absolute top-0 end-0 badge bg-danger m-2">Hết hàng</span>
                            }
                        </div>
                        
                        <div class="card-body d-flex flex-column">
                            <div class="mb-2">
                                <span class="badge bg-primary bg-opacity-10 text-primary mb-2">@product.Category.CategoryName</span>
                            </div>
                            
                            <h5 class="card-title mb-2" style="font-size: 1rem; line-height: 1.3;">
                                @product.ProductName
                            </h5>
                            
                            <p class="card-text text-muted small mb-2">
                                <i class="bi bi-weight me-1"></i>@product.Weight
                            </p>
                            
                            <div class="mt-auto">
                                <div class="d-flex justify-content-between align-items-center mb-3">
                                    <h6 class="text-primary fw-bold mb-0">
                                        @product.UnitPrice.ToString("C0", new System.Globalization.CultureInfo("vi-VN"))
                                    </h6>
                                    <small class="text-muted">
                                        <i class="bi bi-box me-1"></i>@product.UnitsInStock
                                    </small>
                                </div>
                                
                                <div class="d-grid gap-2">
                                    @if (product.ActiveStatus && product.UnitsInStock > 0)
                                    {
                                        <button class="btn btn-primary btn-sm" @onclick="() => AddToCart(product)">
                                            <i class="bi bi-cart-plus me-1"></i>Thêm vào giỏ
                                        </button>
                                    }
                                    else
                                    {
                                        <button class="btn btn-secondary btn-sm" disabled>
                                            <i class="bi bi-cart-x me-1"></i>Không thể mua
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        
        <!-- Load More Button -->
        @if (filteredProducts.Count > displayCount)
        {
            <div class="text-center mt-4">
                <button class="btn btn-outline-primary btn-lg" @onclick="LoadMore">
                    <i class="bi bi-arrow-down-circle me-2"></i>
                    Xem thêm (@(filteredProducts.Count - displayCount) sản phẩm)
                </button>
            </div>
        }
    }
    else
    {
        <div class="text-center py-5">
            <i class="bi bi-search display-1 text-muted mb-3"></i>
            <h4 class="text-muted">Không tìm thấy sản phẩm nào</h4>
            <p class="text-muted">Hãy thử tìm kiếm với từ khóa khác hoặc chọn danh mục khác.</p>
            <button class="btn btn-primary" @onclick="ClearFilters">
                <i class="bi bi-arrow-clockwise me-2"></i>Xóa bộ lọc
            </button>
        </div>
    }
</section>

<!-- Statistics Section -->
<section class="bg-light py-5">
    <div class="container">
        <div class="row text-center">
            <div class="col-md-3 mb-4">
                <div class="d-flex flex-column align-items-center">
                    <i class="bi bi-box-seam text-primary display-6 mb-2"></i>
                    <h3 class="fw-bold text-primary">@products.Count</h3>
                    <p class="text-muted mb-0">Sản phẩm</p>
                </div>
            </div>
            <div class="col-md-3 mb-4">
                <div class="d-flex flex-column align-items-center">
                    <i class="bi bi-tags text-success display-6 mb-2"></i>
                    <h3 class="fw-bold text-success">@categories.Count</h3>
                    <p class="text-muted mb-0">Danh mục</p>
                </div>
            </div>
            <div class="col-md-3 mb-4">
                <div class="d-flex flex-column align-items-center">
                    <i class="bi bi-check-circle text-info display-6 mb-2"></i>
                    <h3 class="fw-bold text-info">@products.Count(p => p.ActiveStatus)</h3>
                    <p class="text-muted mb-0">Đang bán</p>
                </div>
            </div>
            <div class="col-md-3 mb-4">
                <div class="d-flex flex-column align-items-center">
                    <i class="bi bi-exclamation-triangle text-warning display-6 mb-2"></i>
                    <h3 class="fw-bold text-warning">@products.Count(p => p.UnitsInStock <= 10)</h3>
                    <p class="text-muted mb-0">Sắp hết hàng</p>
                </div>
            </div>
        </div>
    </div>
</section>

<style>
    .hero-section {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 .5rem 1rem rgba(0,0,0,.15)!important;
    }
    
    .product-card:hover .card-img-top {
        transform: scale(1.05);
    }
</style>

@code {
    private List<ProductDTO> products = new();
    private List<ProductDTO> filteredProducts = new();
    private List<CategoryDTO> categories = new();
    private bool isLoading = true;
    private string searchTerm = string.Empty;
    private int selectedCategoryId = 0;
    private int displayCount = 8;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load data sequentially to avoid DbContext threading issues
            categories = await CategoryService.GetAllCategoriesAsync();
            products = await ProductService.GetAllProductsAsync();
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        var query = products.AsQueryable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(p => p.ProductName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                   (p.Category.CategoryName != null && p.Category.CategoryName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
        }

        // Apply category filter
        if (selectedCategoryId > 0)
        {
            query = query.Where(p => p.CategoryId == selectedCategoryId);
        }

        // Sort by: In stock first, then by name
        filteredProducts = query
            .OrderByDescending(p => p.UnitsInStock > 0)
            .ThenBy(p => p.ProductName)
            .ToList();

        // Reset display count when filters change
        displayCount = 8;
        StateHasChanged();
    }

    private void LoadMore()
    {
        displayCount += 8;
        StateHasChanged();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        selectedCategoryId = 0;
        ApplyFilters();
    }

    private async Task AddToCart(ProductDTO product)
    {
        var userSession = SessionService.GetUserSession();
        if (userSession == null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
        await CartService.AddToCartAsync(userSession.MemberId, product.ProductId, 1);
    }

    // Auto-apply filters when search term or category changes
    private string _previousSearchTerm = string.Empty;
    private int _previousCategoryId = 0;

    protected override void OnAfterRender(bool firstRender)
    {
        if (_previousSearchTerm != searchTerm || _previousCategoryId != selectedCategoryId)
        {
            _previousSearchTerm = searchTerm;
            _previousCategoryId = selectedCategoryId;
            ApplyFilters();
        }
    }
}

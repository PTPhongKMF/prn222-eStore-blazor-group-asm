@page "/admin/categories"
@using eStore.Components.Layout
@using eStore.Components.Shared
@inject ICategoryService CategoryService
@inject NavigationManager NavigationManager
@inject SessionService SessionService
@rendermode InteractiveServer

@using BLL.DTOs
@using BLL.Interface
@using eStore.Components.Services

<PageTitle>Quản lý danh mục</PageTitle>

<AdminOnly>
    <div class="container py-4">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2 class="fw-bold text-primary">Quản lý danh mục</h2>
            <a href="/admin/categories/create" class="btn btn-primary">
                <i class="bi bi-plus-circle me-2"></i>Thêm danh mục
            </a>
        </div>

        <div class="card shadow-sm mb-4">
            <div class="card-header bg-white py-3">
                <div class="row g-3">
                    <div class="col-md-6">
                        <div class="input-group">
                            <span class="input-group-text bg-transparent border-end-0">
                                <i class="bi bi-search"></i>
                            </span>
                            <input type="text" class="form-control border-start-0"
                                   placeholder="Tìm kiếm danh mục..."
                                   @bind="searchTerm"
                                   @bind:event="oninput" />
                        </div>
                    </div>
                    <div class="col-md-6 text-end">
                        @if (!string.IsNullOrWhiteSpace(searchTerm))
                        {
                            <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                <i class="bi bi-x-circle me-1"></i>Xóa tìm kiếm
                            </button>
                        }
                    </div>
                </div>
            </div>

            <div class="card-body p-0">
                @if (isLoading)
                {
                    <div class="text-center p-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Đang tải...</span>
                        </div>
                        <p class="mt-2">Đang tải dữ liệu...</p>
                    </div>
                }
                else if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger m-3">
                        <i class="bi bi-exclamation-triangle me-2"></i>
                        <strong>Lỗi:</strong> @errorMessage
                    </div>
                }
                else if (filteredCategories.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover mb-0 align-middle">
                            <thead class="table-light">
                                <tr>
                                    <th scope="col">#</th>
                                    <th scope="col">Tên danh mục</th>
                                    <th scope="col">Mô tả</th>
                                    <th scope="col" width="150">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var (category, index) in filteredCategories.Select((c, i) => (c, i)))
                                {
                                    <tr>
                                        <td>@(index + 1)</td>
                                        <td>
                                            <strong>@category.CategoryName</strong>
                                        </td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(category.Description))
                                            {
                                                <span>@(category.Description.Length > 50 ? category.Description.Substring(0, 50) + "..." : category.Description)</span>
                                            }
                                            else
                                            {
                                                <span class="text-muted fst-italic">Chưa có mô tả</span>
                                            }
                                        </td>
                                        <td class="d-flex gap-1">
                                            <a href="/admin/categories/edit/@category.CategoryId" class="btn btn-sm btn-outline-primary" title="Chỉnh sửa">
                                                <i class="bi bi-pencil"></i>
                                            </a>
                                            <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteModal(category)" title="Xóa">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Statistics -->
                    <div class="d-flex justify-content-between align-items-center p-3 bg-light">
                        <span>Hiển thị @filteredCategories.Count trên tổng số @categories.Count danh mục</span>
                    </div>
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="bi bi-folder2-open display-5 text-muted"></i>
                        <p class="mt-3">
                            @if (!string.IsNullOrWhiteSpace(searchTerm))
                            {
                                <text>Không tìm thấy danh mục nào phù hợp với "@searchTerm"</text>
                            }
                            else
                            {
                                <text>Chưa có danh mục nào</text>
                            }
                        </p>
                        <a href="/admin/categories/create" class="btn btn-primary mt-2">
                            <i class="bi bi-plus-circle me-2"></i>Thêm danh mục mới
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>

</AdminOnly>

@code {
    private List<CategoryDTO> categories = new();
    private List<CategoryDTO> filteredCategories = new();
    private bool isLoading = true;
    private bool isDeleting = false;
    private string searchTerm = string.Empty;
    private string? errorMessage;
    private CategoryDTO? categoryToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            categories = await CategoryService.GetAllCategoriesAsync();
            
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        var query = categories.AsQueryable();

        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(c => 
                c.CategoryName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (c.Description != null && c.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
        }

        filteredCategories = query.OrderBy(c => c.CategoryName).ToList();
        StateHasChanged();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        ApplyFilters();
    }

    private void ShowDeleteModal(CategoryDTO category)
    {
        categoryToDelete = category;
        StateHasChanged();
    }

    private void HideDeleteModal()
    {
        categoryToDelete = null;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        if (categoryToDelete == null) return;

        isDeleting = true;
        StateHasChanged();

        try
        {
            var result = await CategoryService.DeleteCategoryAsync(categoryToDelete.CategoryId);
            
            if (result.Success)
            {
                categories.RemoveAll(c => c.CategoryId == categoryToDelete.CategoryId);
                ApplyFilters();
                HideDeleteModal();
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Lỗi khi xóa danh mục: {ex.Message}";
        }
        finally
        {
            isDeleting = false;
            StateHasChanged();
        }
    }

    // Auto-apply filters when search term changes
    private string _previousSearchTerm = string.Empty;

    protected override void OnAfterRender(bool firstRender)
    {
        if (_previousSearchTerm != searchTerm)
        {
            _previousSearchTerm = searchTerm;
            ApplyFilters();
        }
    }
}